{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","catch","error","console","log","newObject","post","id","put","delete","Person","name","number","PersonList","condOperator","setPersons","setSuccessMessage","map","person","onClick","window","confirm","personService","setTimeout","Notification","message","typeIsError","class","Filter","changeHandler","filterWord","onChange","value","NameNumForm","handleSubmitForm","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","App","useState","persons","setNewName","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","successMessage","useEffect","personsToShow","filter","includes","event","target","preventDefault","personObj","find","p","newPerson","concat","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab1ed9d3.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data).catch(error => {\r\n    console.log('failed request')\r\n  })\r\n}\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response =>response.data).catch(error => {\r\n    console.log('failed delete request')\r\n  })\r\n}\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nconst Person = ({name, number})=><span>{name} - {number}</span>\r\n\r\nconst PersonList = ({condOperator, setPersons, setSuccessMessage}) =>{\r\n    const deletePerson = (id)=>{\r\n        if (window.confirm(\"Delete name from phonebook?\")) {\r\n            // console.log(\"id\",id)\r\n            personService\r\n            .remove(id)\r\n            .then(response => {personService\r\n                .getAll()\r\n                .then(response => {\r\n                    setPersons(response)\r\n                })\r\n            })\r\n            setSuccessMessage(`delete successfull`)\r\n            setTimeout(() => {\r\n                setSuccessMessage(null)\r\n            }, 5000)\r\n        }\r\n    }\r\n    return(\r\n        condOperator.map(person =><div key={person.name}>\r\n            <Person name={person.name} number={person.number}/>\r\n            <button onClick={()=>deletePerson(person.id)}>-</button>\r\n            </div>\r\n        )\r\n    )\r\n}\r\nconst Notification = ({ message, typeIsError }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n    else if(typeIsError){\r\n        return (\r\n        <div class='error'>\r\n            {message}\r\n        </div>)\r\n    }\r\n    else{\r\n        return(\r\n        <div class='succ'>\r\n            {message}\r\n        </div>)\r\n    }\r\n}\r\nconst Filter = ({changeHandler, filterWord}) =>{\r\n    return (\r\n    <div>\r\n        filter by name:\r\n        <input onChange={changeHandler} value={filterWord} />\r\n    </div>)\r\n}\r\nconst NameNumForm = (\r\n    {handleSubmitForm, \r\n    newName, \r\n    handleNameChange, \r\n    newNumber, \r\n    handleNumberChange} ) => {\r\n        return(\r\n        <form onSubmit={handleSubmitForm}>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newFilter, setNewFilter] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n  \r\n  //initial data fetch\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(response => {\r\n        setPersons(response)\r\n      })\r\n  }, [])\r\n\r\n  const handleNameChange = (event) => setNewName(event.target.value)\r\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\r\n  const handleFilterChange = (event) => setNewFilter(event.target.value)\r\n  const getNotes = () => {\r\n    personService\r\n    .getAll()\r\n    .then(response => {\r\n      setPersons(response)\r\n    })\r\n  }\r\n  //filter persons with given name\r\n  const personsToShow = newFilter === ''\r\n  ? persons: \r\n  persons.filter(person =>person.name.includes(newFilter))\r\n  \r\n  //handles person&number submission\r\n  const handleSubmitForm = (event) => {\r\n      event.preventDefault()\r\n      if(persons.map(person =>person.name).includes(newName)){\r\n          if(window.confirm(`${newName} is already in the phonebook, replace the old number with a new one?`)){\r\n              const personObj = persons.find(p => p.name === newName)\r\n              const newPerson = {...personObj, number: newNumber }\r\n\r\n              personService.update(newPerson.id,newPerson).then(response =>{\r\n                  setPersons(persons.map(person => person.name !== newName ? person : response))\r\n                  setSuccessMessage(`${newName} Information updated`)\r\n                  setTimeout(() => {\r\n                    setSuccessMessage(null)\r\n                }, 5000)\r\n                }).catch(error => {\r\n                setErrorMessage(`${newName} has already been removed from the server... updating list.`)})\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n                getNotes()\r\n                setNewNumber('')\r\n                setNewName('')\r\n            }\r\n        }\r\n        else{\r\n            const newPerson = {name: newName, number: newNumber}\r\n            personService.create(newPerson).then(response => setPersons(persons.concat(response)))\r\n            setSuccessMessage(`${newName} added to phonebook`)\r\n            setTimeout(() => {\r\n                setSuccessMessage(null)\r\n            }, 5000)\r\n\r\n            setNewNumber('')\r\n            setNewName('')\r\n        }\r\n    }\r\n    return(\r\n    <div>\r\n        <h2>Phonebook</h2>\r\n        <Notification message={errorMessage} typeIsError = {true}/>\r\n        <Notification message={successMessage} typeIsError = {false}/>\r\n        <Filter changeHandler={handleFilterChange} filterWord={newFilter} /> \r\n        <h2>Add a new</h2>\r\n        <NameNumForm \r\n        handleSubmitForm={handleSubmitForm} \r\n        newName={newName} \r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange} \r\n        />\r\n        <h2>Numbers</h2>\r\n        <PersonList condOperator={personsToShow} persons ={persons} setPersons={setPersons} setSuccessMessage = {setSuccessMessage}/>\r\n    </div>\r\n  )\r\n}\r\nexport default App","import React from 'react'\nimport ReactDom from 'react-dom'\nimport App from './App'\nimport './index.css'\nReactDom.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}